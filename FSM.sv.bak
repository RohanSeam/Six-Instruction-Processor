// TCES 330: Project B
// Rohan Seam & Trung Do
//
// This module is to implement the Finite state machine to control 
module FSM(Clock, reset, IR, PC_clr, PC_up, IR_ld, D_addr, D_wr, RF_s, 
			  RF_W_addr, RF_W_en, RF_Ra_addr, RF_Rb_addr, ALU_s0, OutState);
	input Clock, reset;				// clock and reset signal
	input [15:0] IR;				// Instruction from IR
	output logic PC_clr,				// PC clear command
					 PC_up,				// PC increment command
					 IR_ld,				// Instruction load command
					 D_wr, 				// Data memory write enable
					 RF_s,				// Mux 2 to 1 select line
					 RF_W_en;			// Register file write enable
	output [3:0] OutState;			//Display the current state of the FSM
	output logic [7:0] D_addr;		// Data memory address
	output logic [3:0] RF_W_addr,			// Register file write address
							 RF_Ra_addr,		// Register file A-side read adress
							 RF_Rb_addr;		// Register file B-side read adress
	output logic [2:0] ALU_s0;		// ALU fuction select line
	
	localparam Init	= 4'd0,
				  Fetch	= 4'd1,
				  Decode	= 4'd2,
				  NOOP	= 4'd3,
				  LOAD_A = 4'd4,
				  LOAD_B = 4'd5,
				  STORE	= 4'd6,
				  ADD		= 4'd7,
				  SUB		= 4'd8,
				  HALT	= 4'd9;

	logic [3:0] CurrentState = Init, NextState;
	
	assign OutState = CurrentState;
	
	always_comb begin
		PC_clr = 0;
		PC_up	 = 0;
		IR_ld	 = 0;
		D_wr	 = 0;
		RF_s	 = 0;
		RF_W_en= 0;
		D_addr = 0;
		RF_W_addr = 0;
		RF_Ra_addr= 0;
		RF_Rb_addr= 0;
		ALU_s0 = 0;
		
		case(CurrentState) begin
			Init: begin
				PC_clr = 1;										// PC = 0
				NextState = Fetch;
			end
			
			Fetch: begin
				IR_ld = 1;
				PC_up = 1;										// PC = PC + 1
				NextState = Decode;
			end
			
			Decode: begin
				case(IR[15:12]) begin
					4'b0000: NextState = NOOP;
					4'b0010: NextState = LOAD_A;
					4'b0001: NextState = STORE;
					4'b0011: NextState = ADD;
					4'b0100: NextState = SUB;
					4'b0101: NextState = HALT;
					default: NextState = NOOP;				// else go to NOOP
				endcase
			end
			
			NOOP: NextState = Fetch;
			
			LOAD_A: begin
				D_addr = IR[11:4]; 
				RF_s = 1;
				RF_W_addr = IR[3:0];
				NextState = LOAD_B;
			end
			
			LOAD_B: begin
				D_addr = IR[11:4]; 
				RF_s = 1;
				RF_W_addr = IR[3:0];
				RF_W_en = 1;
				NextState = Fetch;
			end
			
			STORE: begin
				D_addr = IR[7:0];
				D_wr = 1;
				RF_Ra_addr = IR[11:8];
				NextState = Fetch;
			end
			
			ADD: begin
				RF_W_addr = IR[3:0];
				RF_W_en = 1;
				RF_Ra_addr = IR[11:8];
				RF_Rb_addr = IR[7:4];
				ALU_s0 = 1;
				RF_s = 0;
				NextState = Fetch;
			end
			
			SUB: begin
				RF_W_addr = IR[3:0];
				RF_W_en = 1;
				RF_Ra_addr = IR[11:8];
				RF_Rb_addr = IR[7:4];
				ALU_s0 = 2;
				RF_s = 0;
				NextState = Fetch;
			end

			HALT: NextState = HALT;
			
			default: NextState = Init;
		endcase
	end
	
	always_ff @(posedge Clock) begin
		if (reset) CurrentState <= Init;
		else CurrentState <= NextState;				// Go to the next state we set
	end
endmodule 

// Testbench
module FSM_testbench();
	logic Clock, reset;				
	logic [15:0] IR;				
	logic PC_clr, PC_up, IR_ld, D_wr, RF_s, RF_W_en;			
	logic [3:0] OutState;			
	logic [7:0] D_addr;		
	logic [3:0] RF_W_addr, RF_Ra_addr, RF_Rb_addr;		
	logic [2:0] ALU_s0;		
	integer [3:0] I;
	
	// Instantiate the FSM
	FSM DUT(Clock, reset, IR, PC_clr, PC_up, IR_ld, D_addr, D_wr, RF_s,
			  RF_W_addr, RF_W_en, RF_Ra_addr, RF_Rb_addr, ALU_s0, OutState);
			  
	// Clock
	always begin  	
		Clock = 0;  	
		#10;  	
		Clock = 1;  	
		#10;  
	end 
	
	initial begin
		$display("\t Time \t reset \t IR \t OutState \t PC_clr \t PC_up \t IR_ld \t D_addr \t D_wr \t RF_s \t RF_W_addr \t RF_W_en \t RF_Ra_addr \t RF_Rb_addr \t ALU_s0");
		reset = 0;
		for (I = 0; I < 10; I++) begin
			IR[15:12] = I[3:0]; IR[11:0] = 0; #20; 		// Set the opcode
		end
	end
endmodule 

